{{- if .Values.rateLimit.enabled }}
# Rate limiting using Envoy's local rate limiting filter with per-user buckets
# This implements per-user rate limiting using source IP to create separate buckets per user
# Similar to sticky sessions approach, each user (source IP) gets their own rate limit bucket
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: {{ .Release.Name }}-rate-limit-filter
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
    # First, add a filter to inject the source IP as a header for rate limiting
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inline_code: |
              function envoy_on_request(request_handle)
                -- Extract the source IP and add it as a header for rate limiting
                local headers = request_handle:headers()
                local source_ip = request_handle:streamInfo():downstreamRemoteAddress():ip()
                headers:add("x-user-ip", source_ip)
              end
    # Then, add the local rate limiting filter that uses the injected header
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.lua"
      patch:
        operation: INSERT_AFTER
        value:
          name: envoy.filters.http.local_ratelimit
          typed_config:
            "@type": type.googleapis.com/udpa.type.v1.TypedStruct
            type_url: type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
            value:
              stat_prefix: http_local_rate_limiter
              # Default token bucket configuration (fallback)
              token_bucket:
                max_tokens: {{ .Values.rateLimit.requestsPerMinute }}
                tokens_per_fill: {{ .Values.rateLimit.requestsPerMinute }}
                fill_interval: 60s  # 1 minute interval for proper per-minute limiting
              # Enable the filter for all requests
              filter_enabled:
                runtime_key: local_rate_limit_enabled
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              # Enforce rate limiting (block when limit exceeded)
              filter_enforced:
                runtime_key: local_rate_limit_enforced
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              # Configure per-user rate limiting using the injected source IP header
              # This creates separate rate limit counters for each unique source IP
              descriptors:
                - entries:
                    - key: "user_ip"
                      # Use the header we injected with the source IP
                      request_headers:
                        header_name: "x-user-ip"
                        descriptor_key: "user_ip"
                  token_bucket:
                    max_tokens: {{ .Values.rateLimit.requestsPerMinute }}
                    tokens_per_fill: {{ .Values.rateLimit.requestsPerMinute }}
                    fill_interval: 60s
              # Return response when rate limited
              local_reply_config:
                status_code: 429
                body:
                  inline_string: "Rate limit exceeded. You are making requests too quickly. Please wait before trying again."
{{- end }}
